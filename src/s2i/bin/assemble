#!/bin/bash -e
#
# S2I assemble script for the 'kunde' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# Gradle build script
execute_gradle_build()
{
  echo "---> Building application using Gradle ..."

  GRADLE_ARGS="assemble ${GRADLE_ARGS_APPEND}"
  echo "---> Found gradle.build. Attempting to build with 'gradle -s ${GRADLE_ARGS}'"

  echo "---> Using $(gradle --version)"

  # Execute the actual build
  gradle -s $GRADLE_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Gradle build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the builds/libs directory
  # to the $DEPLOY_DIR directory for later deployment
  cp -v $HOME/build/libs/*.* $DEPLOY_DIR 2> /dev/null

  # Clean up after Gradle run ....
  gradle clean

  if [ -d "$HOME/.gradle/caches" ]; then
    rm -rf $HOME/.gradle/caches
  fi
}


echo "--> S2I:assemble step start ..."
echo "--> Executing script as user=" + `id`

# If the 'kunde' assemble script is executed with the '-h' flag, print the usage.
if [ "$1" == "-h" ]; then
	exec /usr/libexec/s2i/usage
fi

# Restore artifacts from the previous build (if they exist).
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  mv /tmp/artifacts/. ./
fi

#echo "---> Installing application source..."
#cp -Rf /tmp/src/. ./
#echo "---> Building application from source..."
# TODO: Add build steps for your application, eg npm install, bundle install, pip install, etc.
#.\gradlew bootJar

echo "---> Starting Java web application build process ..."
echo "---> Application source directory is set to $HOME ..."
 
DEPLOY_DIR=/opt/openshift
echo "---> Set target directory to $DEPLOY_DIR ..."

cp -Rf /tmp/src/. ./
echo "---> Copied application source to $HOME ..."
ls -la $HOME

echo "---> S2I:assemble Build type=$BUILD_TYPE ..."

#if [ $BUILD_TYPE = "Maven" ] && [ -f "$HOME/pom.xml" ]; then
  execute_maven_build
#elif [ $BUILD_TYPE = "Gradle" ] && [ -f "$HOME/build.gradle" ]; then
#  execute_gradle_build
#else
  # Copy the fat jar to the deployment directory
#  cp -v $HOME/*.jar $DEPLOY_DIR 2> /dev/null
#fi

#HOME=/opt/app-root/src
#LOCAL_SOURCE_DIR=${HOME}/source
#mkdir -p $LOCAL_SOURCE_DIR
#DEPLOY_DIR=/opt/openshift
# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
#ARTIFACT_DIR=${ARTIFACT_DIR-target}

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all JAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.jar $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR




# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
# copy_artifacts "deployments"

# if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
#   echo "Copying config files from project..."
#   cp -v $LOCAL_SOURCE_DIR/configuration/* $ARTIFACTS_HOME
# fi

# For Spring Boot, there should only be 1 fat jar
if [ $(ls $DEPLOY_DIR/*.jar | wc -l) -eq 1 ]; then
  mv $DEPLOY_DIR/*.jar $DEPLOY_DIR/app.jar
  [ ! -f $DEPLOY_DIR/app.jar ] && echo "Application could not be properly built." && exit 1 
  echo "---> Application deployed successfully.  jar file is located in $DEPLOY_DIR/app.jar"
else
  exit 1
fi